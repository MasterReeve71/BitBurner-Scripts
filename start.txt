//////////////////////////////////////////////////////////////////////////////////////////////
// This script takes the list of all hackable servers in the game and pares it down to      //
// a list made up hackable servers that have Max Money greater than zero. It then copies    //
// 'autohacker.js' to that list of servers, to prepare for later.                           //
//                                                                                          //
// It then goes into a loop that will end ONLY when the script completes all its tasks.     //
// First off, it goes through the list of servers one at a time. If you lack Root           //
// Access, it tries to get it. If you have Root Access, it checks to see if 'autohacker.js' //
// is already running on the current target; if not, it kills any scripts that might        //
// already be running on that server and runs 'autohacker.js' using as many threads as it   //
// calculates that the server's RAM can handle.                                             //
//                                                                                          //
// The 'autohacker.js' script itself takes four arguments, allowing it to target up to four //
// different servers as it runs -- which was done for the sake of flexibility -- but in     //
// this case, all four arguments will be the name of the very server on which the script is //
// being run, making the host target itself with the script.                                //
//                                                                                          //
// Once 'autohacker.js' is running on all possible targets, the script will shut down.      //
//////////////////////////////////////////////////////////////////////////////////////////////

export async function main(ns)
{ await ns.disableLog('ALL');
  var allsrv=await list_of_all_servers(ns,allsrv);
  var list=[];
  for (var i=0; i<allsrv.length; i++)
  { if (ns.getServerMaxMoney(allsrv[i])>0)
    { list.push(allsrv[i]);
      await ns.scp('autohacker.js','home',allsrv[i]);
    }
  }
  var notDone=true;
  while (notDone)
  { var count=0;
    for (var i=0; i<list.length; i++)
    { if (ns.hasRootAccess(list[i]))
      { count++;
       if (!ns.scriptRunning('autohacker.js',list[i]))
       { 
          await ns.killall(list[i]);
          if(ns.getServerMaxRam(list[i])>=ns.getScriptRam('autohacker.js',list[i]))
          { 
            await ns.exec('autohacker.js',list[i],Math.floor(ns.getServerMaxRam(list[i])/ns.getScriptRam('autohacker.js',list[i])),list[i],list[i],list[i],list[i]);
          }
        }
      }
      else
      { if (await ns.getServerNumPortsRequired(list[i])>0)
        { await try_to_root(ns,list[i]);
        }
        else
        { await ns.nuke(list[i]);
        }
      }
    }
    if (count==list.length)
    { notDone=false;
    }
    await ns.sleep(5000);
  }
  await ns.toast('START: complete!','info',30000);
} // end main

/////////////////////////////////////////////////////////

async function try_to_root(ns,host)
{ var x=0;
  if (await ns.fileExists('BruteSSH.exe','home'))
  { await ns.brutessh(host);
    x++;
  }
  if (await ns.fileExists('FTPCrack.exe','home'))
  { await ns.ftpcrack(host);
    x++;
  }
  if (await ns.fileExists('relaySMTP.exe','home'))
  { await ns.relaysmtp(host);
    x++;
  }
  if (await ns.fileExists('HTTPWorm.exe','home'))
  { await ns.httpworm(host);
    x++;
  }
  if (await ns.fileExists('SQLInject.exe','home'))
  { await ns.sqlinject(host);
    x++;
  }
  if (x >= await ns.getServerNumPortsRequired(host))
  { await ns.nuke(host);
    await ns.toast('nuke('+host+')','info',2000);
  }
  return;
} // end try_to_root

/////////////////////////////////////////////////////////

async function list_of_all_servers(ns,list)
{ const purchased_servers=['srv01','srv02','srv03','srv04','srv05','srv06','srv07','srv08','srv09','srv10','srv11','srv12','srv13','srv14','srv15','srv16','srv17','srv18','srv19','srv20','srv21','srv22','srv23','srv24'];
  const hosts=await allServers(ns,'home');
  var list=[];
  for (var i=0; i<hosts.length; i++)
  { if (hosts[i]!='home'&&hosts[i]!='srv-nodebot'&&hosts[i]!='srv-stockbot'&&!purchased_servers.includes(hosts[i]))
    { list.push(hosts[i]);
    }
  }
  await ns.sleep(10);
  return list;
}

/////////////////////////////////////////////////////////

async function allServers(ns,start,found)
{ const purchased_servers=['srv01','srv02','srv03','srv04','srv05','srv06','srv07','srv08','srv09','srv10','srv11','srv12','srv13','srv14','srv15','srv16','srv17','srv18','srv19','srv20','srv21','srv22','srv23','srv24'];
	if(!found)
  { found = new Set([]);
  }
  const servers = new Set(await ns.scan(start));
  for (const server of servers)
  { if (!found.has(server))
    { found.add(server);
      for (const result of await allServers(ns,server,found))
      { found.add(result);
      }
    }
	await ns.sleep(10);
  }  
  return [...found];
} // end allServers