// This script receives four arguments: the names of four servers to hack.
// You *can* put the same server name in more than once. The script sees
// each argument as an individual target and doing so will not affect the
// script's execution. Each name given as an argument is a target.
// The script doesn't care what server is named as a target; it will try
// to weaken, grow, or hack each target it's been given as an argument.
//
// NOTE: You should have Root Access on all targets before running this.

export async function main(ns)
{ 
  await ns.disableLog('ALL');
  
  const host=[ns.args[0],ns.args[1],ns.args[2],ns.args[3]];
  const targetCash=[(ns.getServerMaxMoney(host[0]))*0.75,(ns.getServerMaxMoney(host[1]))*0.75,(ns.getServerMaxMoney(host[2]))*0.75,(ns.getServerMaxMoney(host[3]))*0.75];
  const targetSec=[(ns.getServerMinSecurityLevel(host[0])*1.5),(ns.getServerMinSecurityLevel(host[1])*1.5),(ns.getServerMinSecurityLevel(host[2])*1.5),(ns.getServerMinSecurityLevel(host[3])*1.5)];
 
  var hacking = false;

  while (true)
  { 
    for (var i=0; i<4; i++)
    {
      if (ns.hasRootAccess(host[i]))
      { 
        const mySkill=await ns.getHackingLevel();
        const security=await ns.getServerSecurityLevel(host[i]);
        const money=await ns.getServerMoneyAvailable(host[i]);
        const level=await ns.getServerRequiredHackingLevel(host[i]);

        if (!hacking)
        {
          if (mySkill >= level)
          {
            hacking = true;
            await ns.toast('hack('+host[i]+'): STARTED','info',5000);
          }
        }
        
        if (security > targetSec[i] && level <= mySkill)
        { 
          await ns.weaken(host[i]);
        }
        else if (money < targetCash[i] && level <= mySkill)
        { 
          await ns.grow(host[i]);
        }
        else
        { 
          if (level <= mySkill)
          { 
            await ns.toast('hack('+host[i]+'): '+ns.nFormat(await ns.hack(host[i]),"$0.000a"),'success',2000);
          }
        }
      }
      await ns.sleep(1000);
    }
  }
}